{"version":3,"sources":["Weather.js","requests.js","App.js","index.js"],"names":["Weather","props","formatDay","timestamp","datetime","Date","console","log","getDate","getMonth","formatTime","hours","getHours","minutes","getMinutes","state","forecasts","focusedForecastDt","Promise","resolve","fetch","process","then","response","status","Error","json","catch","error","warn","setState","list","dt","forecast","className","key","onClick","changeFocusedForecast","this","Math","round","main","temp","src","weather","icon","alt","focusedWeather","find","f","description","map","renderWeatherItem","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAiFeA,G,wDA1Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,UAAY,SAAAC,GACV,IAAMC,EAAW,IAAIC,KAAe,IAAVF,GAI1B,OAHAG,QAAQC,IAAIH,GACAA,EAASI,UAER,KADCJ,EAASK,WAAW,IAlBjB,EAsBjBC,WAAa,SAAAP,GACX,IAAMC,EAAW,IAAIC,KAAe,IAAVF,GACpBQ,EAAQP,EAASQ,WACnBC,EAAUT,EAASU,aAGvB,OAFMD,EAAU,KACZA,EAAU,IAAMA,GACbF,EAAQ,IAAME,GA1BvB,EAAKE,MAAQ,CACXC,UAAW,KACXC,kBAAmB,MAJJ,E,gEAQC,IAAD,OCbY,IAAIC,SAAQ,SAAAC,GAC3CC,MAAM,mEAAD,OAHgBC,mCAGhB,0BACFC,MAAK,SAAAC,GACJ,GAAwB,MAApBA,EAASC,OAAgB,MAAM,IAAIC,MAAMF,EAASC,QACtD,OAAOD,EAASG,UAEjBJ,MAAK,SAAAC,GACJJ,EAAQI,MAETI,OAAM,SAAAC,GACLtB,QAAQuB,KAAKD,SDIDN,MAAK,SAAAN,GACjB,EAAKc,SAAS,CAAEd,UAAWA,EAAWC,kBAAmBD,EAAUe,KAAK,GAAGC,U,wCAqB7DC,GAAW,IAAD,OAC1B,OAEE,yBAAKC,UAAW,cAAcC,IAAKF,EAASD,GAAII,QAAS,kBAAM,EAAKC,sBAAsBJ,KACxF,yBAAKC,UAAU,eAAeI,KAAKpC,UAAU+B,EAASD,KACtD,yBAAKE,UAAU,gBAAgBI,KAAK5B,WAAWuB,EAASD,KACxD,yBAAKE,UAAU,gBAAgBK,KAAKC,MAAMP,EAASQ,KAAKC,OACxD,yBAAKC,IAAK,oCAAoCV,EAASW,QAAQ,GAAGC,KAAK,OAAQC,IAAI,Y,+BAK/E,IAAD,OACD9B,EAAWsB,KAAKvB,MAAMC,UACtBC,EAAoBqB,KAAKvB,MAAME,kBACrC,IAAID,EAAW,OAAO,KACtBV,QAAQC,IAAIS,GAEZ,IAAM+B,EAAiB/B,EAAUe,KAAKiB,MAAK,SAAAC,GAAC,OAAIA,EAAEjB,KAAOf,KAEzD,OACE,yBAAKiB,UAAU,WACb,yBAAKA,UAAU,mBAEb,yBAAKA,UAAU,eAAeI,KAAKpC,UAAU6C,EAAef,KAC5D,yBAAKE,UAAU,gBAAgBI,KAAK5B,WAAWqC,EAAef,KAC9D,yBAAKE,UAAU,gBAAgBK,KAAKC,MAAMO,EAAeN,KAAKC,OAC9D,yBAAKR,UAAU,gBAAgBa,EAAeH,QAAQ,GAAGM,aACzD,yBAAKP,IAAK,oCAAoCI,EAAeH,QAAQ,GAAGC,KAAK,OAAQC,IAAI,UAG3F,yBAAKZ,UAAU,oBACZlB,EAAUe,KAAKoB,KAAI,SAAAlB,GAAQ,OAAI,EAAKmB,kBAAkBnB,Y,GAhE3CoB,c,MESPC,MAXf,WACE,OACE,yBAAKpB,UAAU,OACf,4BAAQA,UAAU,cAAlB,aAGA,kBAAC,EAAD,QCLJqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.9bce03a7.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {getForecast} from './requests'\r\nimport \"./weather.css\"\r\n\r\n\r\n\r\nclass Weather extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      forecasts: null,\r\n      focusedForecastDt: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    getForecast().then(forecasts => {\r\n      this.setState({ forecasts: forecasts, focusedForecastDt: forecasts.list[0].dt})\r\n    })\r\n  }\r\n\r\n  formatDay = timestamp => {\r\n    const datetime = new Date(timestamp*1000)\r\n    console.log(datetime)\r\n    const day = datetime.getDate()\r\n    const month = datetime.getMonth()+1\r\n    return day + '.' + month\r\n  }\r\n\r\n    formatTime = timestamp => {\r\n      const datetime = new Date(timestamp*1000)\r\n      const hours = datetime.getHours()\r\n      let minutes = datetime.getMinutes()\r\n        if (minutes < 10)\r\n          minutes = '0' + minutes\r\n      return hours + ':' + minutes\r\n    }\r\n\r\n  renderWeatherItem(forecast) {\r\n    return (\r\n\r\n      <div className= \"Weather_box\" key={forecast.dt} onClick={() => this.changeFocusedForecast(forecast)}>\r\n        <div className=\"Weather_day\">{this.formatDay(forecast.dt)}</div>\r\n        <div className=\"Weather_time\">{this.formatTime(forecast.dt)}</div>\r\n        <div className=\"Weather_temp\">{Math.round(forecast.main.temp)}</div>\r\n        <img src={'http://openweathermap.org/img/wn/'+forecast.weather[0].icon+'.png'} alt=\"Logo\" />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const forecasts =this.state.forecasts\r\n    const focusedForecastDt = this.state.focusedForecastDt\r\n    if(!forecasts) return null\r\n    console.log(forecasts)\r\n\r\n    const focusedWeather = forecasts.list.find(f => f.dt === focusedForecastDt)\r\n\r\n    return (\r\n      <div className=\"Weather\">\r\n        <div className=\"Weather_focused\">\r\n\r\n          <div className=\"Weather_day\">{this.formatDay(focusedWeather.dt)}</div>\r\n          <div className=\"Weather_time\">{this.formatTime(focusedWeather.dt)}</div>\r\n          <div className=\"Weather_temp\">{Math.round(focusedWeather.main.temp)}</div>\r\n          <div className=\"Weather_desc\">{focusedWeather.weather[0].description}</div>\r\n          <img src={'http://openweathermap.org/img/wn/'+focusedWeather.weather[0].icon+'.png'} alt=\"Logo\" />\r\n        </div>\r\n\r\n        <div className=\"Weather_forecast\">\r\n         { forecasts.list.map(forecast => this.renderWeatherItem(forecast)) }\r\n        </div>\r\n\r\n\r\n\r\n    </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Weather\r\n","export const API_KEY = process.env.REACT_APP_KEY\r\n\r\nexport const getForecast = () => new Promise(resolve => {\r\n  fetch(`http://api.openweathermap.org/data/2.5/forecast?id=658225&APPID=${API_KEY}&units=metric&lang=fi`)\r\n    .then(response => {\r\n      if (response.status !== 200) throw new Error(response.status)\r\n      return response.json()\r\n    })\r\n    .then(response => {\r\n      resolve(response)\r\n    })\r\n    .catch(error => {\r\n      console.warn(error)\r\n    })\r\n  })\r\n","import React from 'react';\r\nimport Weather from './Weather'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <header className=\"App-header\">\r\n    Sää\r\n    </header>\r\n    <Weather/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}